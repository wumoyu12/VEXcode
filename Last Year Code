#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
left_motor = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
right_motor = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
controller_1 = Controller(PRIMARY)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:Last Year Code
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

def pre_autonomous():
    def on_btnB_pressed():
        ClawLeft.spin_for(REVERSE, 30, DEGREES)
        ClawRight.spin_for(FORWARD, 30, DEGREES)
        print("Closed")

    def on_btnA_pressed():
        ClawLeft.spin_for(FORWARD, 30, DEGREES)
        ClawRight.spin_for(REVERSE, 30, DEGREES)
        print("Open")

    def on_buttonUp_pressed():
        PickerLeft.set_velocity(100, PERCENT)
        PickerRight.set_velocity(100, PERCENT)
        PickerLeft.spin(FORWARD)
        PickerRight.spin(REVERSE)
        print("Out")
    
    def on_buttonDown_pressed():
        PickerLeft.set_velocity(100, PERCENT)
        PickerRight.set_velocity(100, PERCENT)
        PickerLeft.spin(REVERSE)
        PickerRight.spin(FORWARD)
        print("In")

    def on_L1_pressed():
        PickerLeft.stop()
        PickerRight.stop()
        print("Motors Stoped")
        

    controller.buttonB.pressed(on_btnB_pressed)
    controller.buttonA.pressed(on_btnA_pressed)
    controller.buttonDown.pressed(on_buttonDown_pressed)
    controller.buttonUp.pressed(on_buttonUp_pressed)
    controller.buttonL1.pressed(on_L1_pressed)

def autonomous():
    brain.screen.clear_screen()
    brain.screen.print("autonomous code")
    # place automonous code here

def user_control():
    brain.screen.clear_screen()
    # place driver control in this while loop
    while True:
        axis_3_pos = controller.axis3.position()
        axis_2_pos = controller.axis2.position()

    if abs(axis_3_pos) + abs(axis_2_pos) > dead_band:
        left_motor.set_velocity((axis_3_pos) , PERCENT)
        right_motor.set_velocity((axis_2_pos), PERCENT)
    else:
        left_motor.set_velocity(0, PERCENT)
        right_motor.set_velocity(0, PERCENT)

        left_motor.spin(FORWARD)
        right_motor.spin(FORWARD)
        wait(20, MSEC)
        


# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()
